"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotebookModel = void 0;
var db_1 = require("./db"); // Assuming getDb is similar to ObjectModel's setup
var logger_1 = require("../utils/logger");
// Helper to convert DB record (snake_case) to application object (camelCase)
function mapRecordToNotebook(record) {
    return {
        id: record.id,
        title: record.title,
        description: record.description,
        objectId: record.object_id,
        createdAt: record.created_at,
        updatedAt: record.updated_at,
    };
}
var NotebookModel = /** @class */ (function () {
    function NotebookModel(dbInstance) {
        this.db = dbInstance !== null && dbInstance !== void 0 ? dbInstance : (0, db_1.getDb)();
        logger_1.logger.info("[NotebookModel] Initialized with database: ".concat(this.db.name));
    }
    /**
     * Creates a new notebook record in the database.
     * Assumes id is provided (generated by the service layer).
     * Timestamps are set to Date.now().
     * @param id - The UUID of the notebook.
     * @param title - The title of the notebook.
     * @param description - Optional description for the notebook.
     * @param objectId - The ID of the associated JeffersObject.
     * @returns Promise resolving to the created NotebookRecord.
     */
    NotebookModel.prototype.create = function (id, title, objectId, description) {
        return __awaiter(this, void 0, void 0, function () {
            var now, stmt;
            return __generator(this, function (_a) {
                now = Date.now();
                stmt = this.db.prepare("\n      INSERT INTO notebooks (id, title, description, object_id, created_at, updated_at)\n      VALUES (@id, @title, @description, @objectId, @createdAt, @updatedAt)\n    ");
                try {
                    stmt.run({
                        id: id,
                        title: title,
                        description: description !== null && description !== void 0 ? description : null,
                        objectId: objectId,
                        createdAt: now,
                        updatedAt: now,
                    });
                    logger_1.logger.debug("[NotebookModel] Created notebook with ID: ".concat(id, ", ObjectId: ").concat(objectId));
                    // Construct and return the NotebookRecord directly as getById would also need object_id from DB
                    // which requires schema change. This assumes insert was successful.
                    return [2 /*return*/, {
                            id: id,
                            title: title,
                            description: description !== null && description !== void 0 ? description : null,
                            objectId: objectId,
                            createdAt: now,
                            updatedAt: now,
                        }];
                }
                catch (error) {
                    logger_1.logger.error("[NotebookModel] Failed to create notebook with ID ".concat(id, ":"), error);
                    throw error;
                }
                return [2 /*return*/];
            });
        });
    };
    /**
     * Retrieves a single notebook by its UUID.
     * @param id - The UUID of the notebook.
     * @returns Promise resolving to the NotebookRecord or null if not found.
     */
    NotebookModel.prototype.getById = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var stmt, record;
            return __generator(this, function (_a) {
                stmt = this.db.prepare('SELECT * FROM notebooks WHERE id = ?');
                try {
                    record = stmt.get(id);
                    return [2 /*return*/, record ? mapRecordToNotebook(record) : null];
                }
                catch (error) {
                    logger_1.logger.error("[NotebookModel] Failed to get notebook by ID ".concat(id, ":"), error);
                    throw error;
                }
                return [2 /*return*/];
            });
        });
    };
    /**
     * Retrieves all notebook records from the database.
     * Ordered by title ascending.
     * @returns Promise resolving to an array of NotebookRecord.
     */
    NotebookModel.prototype.getAll = function () {
        return __awaiter(this, void 0, void 0, function () {
            var stmt, records;
            return __generator(this, function (_a) {
                stmt = this.db.prepare('SELECT * FROM notebooks ORDER BY title ASC');
                try {
                    records = stmt.all();
                    logger_1.logger.info("[NotebookModel] getAll() found ".concat(records.length, " notebooks in database"));
                    if (records.length > 0) {
                        logger_1.logger.debug('[NotebookModel] Sample notebook:', records[0]);
                    }
                    return [2 /*return*/, records.map(mapRecordToNotebook)];
                }
                catch (error) {
                    logger_1.logger.error('[NotebookModel] Failed to get all notebooks:', error);
                    throw error;
                }
                return [2 /*return*/];
            });
        });
    };
    /**
     * Retrieves all regular notebooks (excludes NotebookCovers).
     * A NotebookCover has an ID that starts with "cover-".
     * Ordered by title ascending.
     * @returns Promise resolving to an array of NotebookRecord.
     */
    NotebookModel.prototype.getAllRegularNotebooks = function () {
        return __awaiter(this, void 0, void 0, function () {
            var stmt, records;
            return __generator(this, function (_a) {
                stmt = this.db.prepare("\n      SELECT * FROM notebooks \n      WHERE id NOT LIKE 'cover-%' \n      ORDER BY title ASC\n    ");
                try {
                    records = stmt.all();
                    logger_1.logger.info("[NotebookModel] getAllRegularNotebooks() found ".concat(records.length, " regular notebooks"));
                    return [2 /*return*/, records.map(mapRecordToNotebook)];
                }
                catch (error) {
                    logger_1.logger.error('[NotebookModel] Failed to get regular notebooks:', error);
                    throw error;
                }
                return [2 /*return*/];
            });
        });
    };
    /**
     * Retrieves the NotebookCover for a specific user.
     * @param userId - The user ID (defaults to 'default_user').
     * @returns Promise resolving to the NotebookCover or null if not found.
     */
    NotebookModel.prototype.getNotebookCover = function () {
        return __awaiter(this, arguments, void 0, function (userId) {
            var coverId, stmt, record;
            if (userId === void 0) { userId = 'default_user'; }
            return __generator(this, function (_a) {
                coverId = "cover-".concat(userId);
                stmt = this.db.prepare('SELECT * FROM notebooks WHERE id = ?');
                try {
                    record = stmt.get(coverId);
                    if (record) {
                        logger_1.logger.debug("[NotebookModel] Found NotebookCover for user ".concat(userId));
                        return [2 /*return*/, mapRecordToNotebook(record)];
                    }
                    logger_1.logger.debug("[NotebookModel] No NotebookCover found for user ".concat(userId));
                    return [2 /*return*/, null];
                }
                catch (error) {
                    logger_1.logger.error("[NotebookModel] Failed to get NotebookCover for user ".concat(userId, ":"), error);
                    throw error;
                }
                return [2 /*return*/];
            });
        });
    };
    /**
     * Creates a NotebookCover for a specific user if it doesn't exist.
     * @param userId - The user ID (defaults to 'default_user').
     * @returns Promise resolving to the NotebookCover.
     */
    NotebookModel.prototype.ensureNotebookCover = function () {
        return __awaiter(this, arguments, void 0, function (userId) {
            var existingCover, coverId, title, description, error_1, cover;
            if (userId === void 0) { userId = 'default_user'; }
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getNotebookCover(userId)];
                    case 1:
                        existingCover = _a.sent();
                        if (existingCover) {
                            return [2 /*return*/, existingCover];
                        }
                        coverId = "cover-".concat(userId);
                        title = 'Homepage Conversations';
                        description = "This is a special notebook that stores all homepage chat conversations for ".concat(userId);
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 7]);
                        return [4 /*yield*/, this.create(coverId, title, coverId, description)];
                    case 3: return [2 /*return*/, _a.sent()];
                    case 4:
                        error_1 = _a.sent();
                        if (!(error_1.code === 'SQLITE_CONSTRAINT_UNIQUE')) return [3 /*break*/, 6];
                        return [4 /*yield*/, this.getNotebookCover(userId)];
                    case 5:
                        cover = _a.sent();
                        if (cover) {
                            return [2 /*return*/, cover];
                        }
                        _a.label = 6;
                    case 6: throw error_1;
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Updates specific fields of a notebook record.
     * Currently supports updating 'title' and 'description'.
     * Automatically updates the 'updated_at' timestamp.
     * @param id - The UUID of the notebook to update.
     * @param data - An object containing fields to update (e.g., { title: 'New Title', description: 'New Desc' }).
     * @returns Promise resolving to the updated NotebookRecord or null if not found or no changes made.
     */
    NotebookModel.prototype.update = function (id, data) {
        return __awaiter(this, void 0, void 0, function () {
            var fieldsToSet, params, stmt, info;
            return __generator(this, function (_a) {
                fieldsToSet = [];
                params = { id: id };
                if (data.title !== undefined) {
                    fieldsToSet.push('title = @title');
                    params.title = data.title;
                }
                if (data.description !== undefined) {
                    fieldsToSet.push('description = @description');
                    params.description = data.description;
                }
                if (fieldsToSet.length === 0) {
                    logger_1.logger.warn("[NotebookModel] Update called for notebook ".concat(id, " with no fields to update."));
                    return [2 /*return*/, this.getById(id)]; // Return current record if no actual update occurred
                }
                stmt = this.db.prepare("\n      UPDATE notebooks\n      SET ".concat(fieldsToSet.join(', '), "\n      WHERE id = @id\n    "));
                try {
                    info = stmt.run(params);
                    if (info.changes > 0) {
                        logger_1.logger.debug("[NotebookModel] Updated notebook ".concat(id, ". Fields: ").concat(Object.keys(data).join(', ')));
                        return [2 /*return*/, this.getById(id)]; // Fetch and return the updated record
                    }
                    else {
                        logger_1.logger.warn("[NotebookModel] Attempted to update non-existent notebook ID ".concat(id, " or no changes made that triggered an update."));
                        return [2 /*return*/, null]; // Or fetch by ID if you want to return the record even if DB reports no change
                    }
                }
                catch (error) {
                    logger_1.logger.error("[NotebookModel] Failed to update notebook ".concat(id, ":"), error);
                    throw error;
                }
                return [2 /*return*/];
            });
        });
    };
    /**
     * Deletes a notebook by its ID.
     * Note: This does not handle cascades to related 'chunks' or other entities.
     * That logic should be in the service layer or handled by DB foreign key constraints with ON DELETE CASCADE.
     * @param id The UUID of the notebook to delete.
     * @returns Promise<boolean> indicating success (true if a row was deleted, false otherwise).
     */
    NotebookModel.prototype.delete = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var stmt, info;
            return __generator(this, function (_a) {
                stmt = this.db.prepare('DELETE FROM notebooks WHERE id = ?');
                try {
                    info = stmt.run(id);
                    if (info.changes > 0) {
                        logger_1.logger.debug("[NotebookModel] Deleted notebook with ID: ".concat(id));
                        return [2 /*return*/, true];
                    }
                    logger_1.logger.warn("[NotebookModel] Attempted to delete non-existent notebook ID ".concat(id));
                    return [2 /*return*/, false];
                }
                catch (error) {
                    logger_1.logger.error("[NotebookModel] Failed to delete notebook ID ".concat(id, ":"), error);
                    throw error;
                }
                return [2 /*return*/];
            });
        });
    };
    return NotebookModel;
}());
exports.NotebookModel = NotebookModel;
