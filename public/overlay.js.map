{
  "version": 3,
  "sources": ["../src/overlay/overlay.ts"],
  "sourcesContent": ["// Lightweight context menu overlay script\nimport type { BrowserContextMenuData } from '../../shared/types/contextMenu.types';\n\ninterface MenuAction {\n  windowId: string;\n  action: string;\n  context: BrowserContextMenuData;\n}\n\ninterface MenuItem {\n  label: string;\n  action: string;\n  enabled: boolean;\n  type?: 'separator';\n}\n\n// Extend window interface for overlay instance\ndeclare global {\n  interface Window {\n    overlayInstance: ContextMenuOverlay;\n  }\n}\n\nclass ContextMenuOverlay {\n  private windowId: string | null = null;\n  private contextMenuData: BrowserContextMenuData | null = null;\n  private menuElement: HTMLDivElement | null = null;\n  private root: HTMLElement;\n  private isShowingNewMenu: boolean = false;\n\n  constructor() {\n    console.log('[ContextMenuOverlay] Initializing overlay');\n    \n    // Get window ID from IPC - will be sent after page loads\n    this.windowId = null;\n    console.log('[ContextMenuOverlay] Waiting for window ID via IPC...');\n    \n    this.root = document.getElementById('context-menu-root')!;\n    this.setupStyles();\n    this.setupListeners();\n    this.notifyReady();\n  }\n\n  private setupStyles(): void {\n    // Set up transparent background\n    Object.assign(document.body.style, {\n      backgroundColor: 'transparent',\n      pointerEvents: 'none',\n      margin: '0',\n      padding: '0',\n      overflow: 'hidden',\n      position: 'fixed',\n      inset: '0'\n    });\n\n    // Add color system CSS variables and font faces\n    const style = document.createElement('style');\n    style.textContent = `\n      @font-face {\n        font-family: 'Soehne';\n        src: url('./fonts/soehne-buch.woff2') format('woff2');\n        font-weight: 400;\n        font-style: normal;\n        font-display: swap;\n      }\n      \n      @font-face {\n        font-family: 'Soehne';\n        src: url('./fonts/soehne-kraftig.woff2') format('woff2');\n        font-weight: 500;\n        font-style: normal;\n        font-display: swap;\n      }\n      \n      :root {\n        /* Light mode colors */\n        --step-1: #fdfdfc;\n        --step-3: #f1f0ef;\n        --step-6: #dad9d6;\n        --step-11-5: #51504B;\n      }\n      \n      @media (prefers-color-scheme: dark) {\n        :root {\n          /* Dark mode colors */\n          --step-1: #111110;\n          --step-3: #222221;\n          --step-6: #3b3a37;\n          --step-11-5: #D0CFCA;\n        }\n      }\n      \n      .dark {\n        /* Dark mode colors when explicitly set */\n        --step-1: #111110;\n        --step-3: #222221;\n        --step-6: #3b3a37;\n        --step-11-5: #D0CFCA;\n      }\n    `;\n    document.head.appendChild(style);\n  }\n\n  private setupListeners(): void {\n    console.log('[ContextMenuOverlay] Setting up listeners');\n    console.log('[ContextMenuOverlay] window.api available?', !!window.api);\n    console.log('[ContextMenuOverlay] window.api.browserContextMenu available?', !!window.api?.browserContextMenu);\n    \n    // Listen for context menu data from main process\n    if (window.api?.browserContextMenu) {\n      window.api.browserContextMenu.onShow((data: BrowserContextMenuData) => {\n        console.log('[ContextMenuOverlay] Received context menu data:', data);\n        this.contextMenuData = data;\n        this.showContextMenu(data);\n      });\n      console.log('[ContextMenuOverlay] Subscribed to onShow event');\n\n      // Note: We don't listen for hide events from main process to avoid circular loops\n      // The overlay manages its own hide behavior through click/escape handlers\n    } else {\n      console.error('[ContextMenuOverlay] window.api.browserContextMenu not available!');\n      console.error('[ContextMenuOverlay] window.api:', window.api);\n    }\n\n    // Handle clicks outside the menu\n    document.addEventListener('click', (e) => {\n      if (this.menuElement && !this.menuElement.contains(e.target as Node)) {\n        this.hideContextMenu();\n      }\n    });\n\n    // Handle escape key\n    document.addEventListener('keydown', (e) => {\n      if (e.key === 'Escape') {\n        this.hideContextMenu();\n      }\n    });\n  }\n\n  private notifyReady(): void {\n    if (window.api?.browserContextMenu?.notifyReady) {\n      window.api.browserContextMenu.notifyReady();\n      console.log('[Overlay] Notified main process that overlay is ready');\n    }\n  }\n\n  public setWindowId(windowId: string): void {\n    this.windowId = windowId;\n    console.log('[ContextMenuOverlay] Window ID set to:', windowId);\n  }\n\n  private showContextMenu(data: BrowserContextMenuData): void {\n    // Hide any existing menu without notifying (we're about to show a new one)\n    this.isShowingNewMenu = true;\n    this.hideContextMenu();\n    this.isShowingNewMenu = false;\n\n    // Create menu container\n    this.menuElement = document.createElement('div');\n    this.menuElement.className = 'browser-context-menu';\n    this.menuElement.style.cssText = `\n      position: fixed;\n      left: ${data.x}px;\n      top: ${data.y}px;\n      background: var(--step-1);\n      border: 1px solid var(--step-3);\n      border-radius: 8px;\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\n      padding: 4px 0;\n      min-width: 200px;\n      z-index: 10000;\n      pointer-events: auto;\n      font-family: 'Soehne', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n    `;\n\n    // Create menu items based on context\n    const items = this.getMenuItems(data);\n    \n    items.forEach((item) => {\n      if (item.type === 'separator') {\n        const separator = document.createElement('div');\n        separator.style.cssText = `\n          height: 1px;\n          background: var(--step-6);\n          margin: 4px 8px;\n        `;\n        this.menuElement!.appendChild(separator);\n      } else {\n        const menuItem = document.createElement('div');\n        menuItem.className = 'menu-item';\n        menuItem.textContent = item.label;\n        menuItem.style.cssText = `\n          padding: 8px 16px;\n          cursor: pointer;\n          font-size: 13px;\n          font-weight: 400;\n          color: var(--step-11-5);\n          white-space: nowrap;\n          user-select: none;\n          transition: background-color 0.1s ease;\n        `;\n\n        if (item.enabled === false) {\n          menuItem.style.opacity = '0.4';\n          menuItem.style.cursor = 'default';\n        } else {\n          menuItem.addEventListener('mouseenter', () => {\n            menuItem.style.backgroundColor = 'var(--step-3)';\n          });\n          menuItem.addEventListener('mouseleave', () => {\n            menuItem.style.backgroundColor = 'transparent';\n          });\n          menuItem.addEventListener('click', () => {\n            this.handleMenuClick(item.action);\n          });\n        }\n\n        this.menuElement!.appendChild(menuItem);\n      }\n    });\n\n    // Add to DOM\n    this.root.appendChild(this.menuElement);\n\n    // Adjust position if menu would go off-screen\n    requestAnimationFrame(() => {\n      if (!this.menuElement) return;\n      \n      const rect = this.menuElement.getBoundingClientRect();\n      const windowWidth = window.innerWidth;\n      const windowHeight = window.innerHeight;\n\n      if (rect.right > windowWidth) {\n        this.menuElement.style.left = `${Math.max(0, data.x - rect.width)}px`;\n      }\n      if (rect.bottom > windowHeight) {\n        this.menuElement.style.top = `${Math.max(0, data.y - rect.height)}px`;\n      }\n    });\n  }\n\n  private hideContextMenu(): void {\n    if (this.menuElement) {\n      this.menuElement.remove();\n      this.menuElement = null;\n    }\n    this.contextMenuData = null;\n    \n    // Only notify main process if we're not about to show a new menu\n    if (!this.isShowingNewMenu && window.api?.browserContextMenu?.notifyClosed) {\n      window.api.browserContextMenu.notifyClosed(this.windowId);\n    }\n  }\n\n  private getMenuItems(data: BrowserContextMenuData): MenuItem[] {\n    const items: MenuItem[] = [];\n\n    // Link context menu\n    if (data.browserContext.linkURL) {\n      items.push(\n        { label: 'Open Link in New Tab', action: 'openInNewTab', enabled: true },\n        { label: 'Open Link in Background', action: 'openInBackground', enabled: true },\n        { type: 'separator' } as MenuItem,\n        { label: 'Copy Link', action: 'copyLink', enabled: true }\n      );\n    }\n\n    // Image context menu\n    if (data.browserContext.srcURL && data.browserContext.mediaType === 'image') {\n      if (items.length > 0) items.push({ type: 'separator' } as MenuItem);\n      items.push(\n        { label: 'Open Image in New Tab', action: 'openImageInNewTab', enabled: true },\n        { label: 'Copy Image URL', action: 'copyImageURL', enabled: true },\n        { label: 'Save Image As...', action: 'saveImageAs', enabled: true }\n      );\n    }\n\n    // Text selection context menu\n    if (data.browserContext.selectionText) {\n      if (items.length > 0) items.push({ type: 'separator' } as MenuItem);\n      const truncatedText = data.browserContext.selectionText.substring(0, 20) + (data.browserContext.selectionText.length > 20 ? '...' : '');\n      items.push(\n        { label: 'Copy', action: 'copy', enabled: true },\n        { label: `Search for \"${truncatedText}\"`, action: 'searchSelection', enabled: true }\n      );\n    }\n\n    // Page context menu (when nothing specific is clicked)\n    if (items.length === 0) {\n      items.push(\n        { label: 'Back', action: 'goBack', enabled: data.browserContext.canGoBack ?? false },\n        { label: 'Forward', action: 'goForward', enabled: data.browserContext.canGoForward ?? false },\n        { label: 'Reload', action: 'reload', enabled: true },\n        { type: 'separator' } as MenuItem,\n        { label: 'Copy Page URL', action: 'copyPageURL', enabled: true },\n        { label: 'View Page Source', action: 'viewSource', enabled: true }\n      );\n    }\n\n    // Always add inspect element at the end\n    items.push(\n      { type: 'separator' } as MenuItem,\n      { label: 'Inspect Element', action: 'inspect', enabled: true }\n    );\n\n    return items;\n  }\n\n  private handleMenuClick(action: string): void {\n    console.log('[Overlay] Menu action clicked:', action);\n    \n    if (!this.windowId || !this.contextMenuData) return;\n\n    // Send action to main process\n    if (window.api?.browserContextMenu?.sendAction) {\n      const menuAction: MenuAction = {\n        windowId: this.windowId,\n        action: action,\n        context: this.contextMenuData\n      };\n      window.api.browserContextMenu.sendAction(action, menuAction);\n    }\n\n    // Hide menu after action\n    this.hideContextMenu();\n  }\n}\n\n// Initialize overlay when DOM is ready\nlet overlayInstance: ContextMenuOverlay;\n\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', () => {\n    overlayInstance = new ContextMenuOverlay();\n    window.overlayInstance = overlayInstance;\n  });\n} else {\n  overlayInstance = new ContextMenuOverlay();\n  window.overlayInstance = overlayInstance;\n}"],
  "mappings": "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",
  "names": ["ContextMenuOverlay", "style", "data", "windowId", "item", "separator", "menuItem", "rect", "windowWidth", "windowHeight", "items", "truncatedText", "action", "menuAction", "overlayInstance"]
}
