"use strict";var o=require("electron");var u="profile:get",k="bookmarks:import",m="file:saveTemp",s="bookmarks:progress",B="chat:stream:start",b="chat:stream:stop",i="chat:onResponseChunk",l="chat:onStreamEnd",a="chat:onStreamError",L="chat:getMessages",h="slices:getDetails",x="intent:set",E="intent:on-result",S="notebook:create",c="notebook:getById",_="notebook:getAll",T="notebook:update",d="notebook:delete",g="notebook:getChunks",R="chatSession:createInNotebook",O="chatSession:listForNotebook",I="chatSession:transferToNotebook",p="store:get",v="store:set",C="store:remove",M="main:request-renderer-flush",P="renderer:flush-complete",f="browser:create",D="browser:navigate",w="browser:loadUrl",H="classic-browser:set-bounds",K="classic-browser:set-visibility",A="on-classic-browser-state",U="browser:destroy",N="classic-browser-view-focused";console.log("[Preload Script] Loading...");var $={getAppVersion:()=>(console.log("[Preload Script] Requesting app version via IPC"),o.ipcRenderer.invoke("get-app-version")),getProfile:()=>(console.log("[Preload Script] Requesting profile via IPC"),o.ipcRenderer.invoke(u)),importBookmarks:e=>(console.log("[Preload Script] Invoking bookmarks import via IPC"),o.ipcRenderer.invoke(k,e)),saveTempFile:(e,r)=>(console.log("[Preload Script] Invoking save temp file via IPC"),o.ipcRenderer.invoke(m,{fileName:e,data:r})),onBookmarksProgress:e=>{console.log("[Preload Script] Setting up listener for",s);let r=(n,t)=>{e(t)};return o.ipcRenderer.on(s,r),()=>{console.log("[Preload Script] Removing listener for",s),o.ipcRenderer.removeListener(s,r)}},startChatStream:e=>{let{notebookId:r,sessionId:n,question:t}=e;if(!r||!n||!t){console.error("[Preload Script] startChatStream called with invalid payload.",e);return}console.log(`[Preload Script] Sending CHAT_STREAM_START for notebook: ${r}, session: ${n}, question: "${t.substring(0,30)}..."`),o.ipcRenderer.send(B,e)},stopChatStream:()=>{console.log("[Preload Script] Sending CHAT_STREAM_STOP"),o.ipcRenderer.send(b)},onChatChunk:e=>{let r=(n,t)=>e(t);return o.ipcRenderer.on(i,r),()=>o.ipcRenderer.removeListener(i,r)},onChatStreamEnd:e=>{let r=(n,t)=>e(t);return o.ipcRenderer.on(l,r),()=>o.ipcRenderer.removeListener(l,r)},onChatStreamError:e=>{let r=(n,t)=>e(t);return o.ipcRenderer.on(a,r),()=>o.ipcRenderer.removeListener(a,r)},getMessages:(e,r,n)=>(console.log(`[Preload Script] Invoking getMessages for session: ${e}, limit: ${r}`),o.ipcRenderer.invoke(L,{sessionId:e,limit:r,beforeTimestamp:n})),getSliceDetails:e=>(console.log(`[Preload Script] Invoking getSliceDetails for ${e.length} IDs: [${e.slice(0,5).join(", ")}]...`),!Array.isArray(e)||e.some(r=>typeof r!="number")?(console.error("[Preload Script] getSliceDetails called with invalid input (must be array of numbers)."),Promise.reject(new Error("Invalid input: chunkIds must be an array of numbers."))):o.ipcRenderer.invoke(h,e)),setIntent:e=>(console.log("[Preload Script] Sending SET_INTENT with payload:",e.intentText.substring(0,50)+"..."),o.ipcRenderer.invoke(x,e)),onIntentResult:e=>{console.log("[Preload Script] Setting up listener for ON_INTENT_RESULT");let r=(n,t)=>{e(t)};return o.ipcRenderer.on(E,r),()=>{console.log("[Preload Script] Removing listener for ON_INTENT_RESULT"),o.ipcRenderer.removeListener(E,r)}},createNotebook:e=>(console.log(`[Preload Script] Invoking ${S}`),o.ipcRenderer.invoke(S,e)),getNotebookById:e=>(console.log(`[Preload Script] Invoking ${c} for ID: ${e}`),o.ipcRenderer.invoke(c,e)),getAllNotebooks:()=>(console.log(`[Preload Script] Invoking ${_}`),o.ipcRenderer.invoke(_)),updateNotebook:e=>(console.log(`[Preload Script] Invoking ${T} for ID: ${e.id}`),o.ipcRenderer.invoke(T,e)),deleteNotebook:e=>(console.log(`[Preload Script] Invoking ${d} for ID: ${e}`),o.ipcRenderer.invoke(d,e)),getChunksForNotebook:e=>(console.log(`[Preload Script] Invoking ${g} for notebook ID: ${e}`),o.ipcRenderer.invoke(g,e)),createChatInNotebook:e=>(console.log(`[Preload Script] Invoking ${R} for notebook ID: ${e.notebookId}`),o.ipcRenderer.invoke(R,e)),listChatsForNotebook:e=>(console.log(`[Preload Script] Invoking ${O} for notebook ID: ${e}`),o.ipcRenderer.invoke(O,e)),transferChatToNotebook:e=>(console.log(`[Preload Script] Invoking ${I} for session ID: ${e.sessionId}`),o.ipcRenderer.invoke(I,e)),storeGet:e=>(console.log(`[Preload Script] Invoking ${p} for key: ${e}`),o.ipcRenderer.invoke(p,e)),storeSet:(e,r)=>(console.log(`[Preload Script] Invoking ${v} for key: ${e}`),o.ipcRenderer.invoke(v,{key:e,value:r})),storeRemove:e=>(console.log(`[Preload Script] Invoking ${C} for key: ${e}`),o.ipcRenderer.invoke(C,e)),onMainRequestFlush:e=>{let r=async n=>{console.log("[Preload Script] Received MAIN_REQUEST_RENDERER_FLUSH");try{await e(),console.log("[Preload Script] Renderer flush callback completed. Sending RENDERER_FLUSH_COMPLETE."),o.ipcRenderer.send(P)}catch(t){console.error("[Preload Script] Error during renderer flush callback:",t),o.ipcRenderer.send(P)}};o.ipcRenderer.on(M,r)},classicBrowserCreate:(e,r,n)=>o.ipcRenderer.invoke(f,e,r,n),classicBrowserLoadUrl:(e,r)=>o.ipcRenderer.invoke(w,e,r),classicBrowserNavigate:(e,r)=>o.ipcRenderer.invoke(D,e,r),classicBrowserSetBounds:(e,r)=>{o.ipcRenderer.send(H,e,r)},classicBrowserSetVisibility:(e,r,n)=>{o.ipcRenderer.send(K,e,r,n)},classicBrowserDestroy:e=>o.ipcRenderer.invoke(U,e),onClassicBrowserState:e=>{let r=(n,t)=>e(t);return o.ipcRenderer.on(A,r),()=>{o.ipcRenderer.removeListener(A,r)}},onClassicBrowserViewFocused:e=>{let r=(n,t)=>e(t);return o.ipcRenderer.on(N,r),()=>o.ipcRenderer.removeListener(N,r)}};try{o.contextBridge.exposeInMainWorld("api",$),console.log("[Preload Script] API exposed successfully.")}catch(e){console.error("[Preload Script] Failed to expose API:",e)}
//# sourceMappingURL=preload.js.map
