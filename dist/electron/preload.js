"use strict";var o=require("electron");var N="profile:get",R="bookmarks:import",u="file:saveTemp",s="bookmarks:progress",m="chat:stream:start",A="chat:stream:stop",i="chat:onResponseChunk",l="chat:onStreamEnd",a="chat:onStreamError",C="chat:getMessages",b="slices:getDetails",h="intent:set",c="intent:on-result",E="notebook:create",S="notebook:getById",T="notebook:getAll",g="notebook:update",_="notebook:delete",O="notebook:getChunks",p="chatSession:createInNotebook",d="chatSession:listForNotebook",I="chatSession:transferToNotebook",P="store:get",v="store:set",k="store:remove";console.log("[Preload Script] Loading...");var M={getAppVersion:()=>(console.log("[Preload Script] Requesting app version via IPC"),o.ipcRenderer.invoke("get-app-version")),getProfile:()=>(console.log("[Preload Script] Requesting profile via IPC"),o.ipcRenderer.invoke(N)),importBookmarks:e=>(console.log("[Preload Script] Invoking bookmarks import via IPC"),o.ipcRenderer.invoke(R,e)),saveTempFile:(e,t)=>(console.log("[Preload Script] Invoking save temp file via IPC"),o.ipcRenderer.invoke(u,{fileName:e,data:t})),onBookmarksProgress:e=>{console.log("[Preload Script] Setting up listener for",s);let t=(n,r)=>{e(r)};return o.ipcRenderer.on(s,t),()=>{console.log("[Preload Script] Removing listener for",s),o.ipcRenderer.removeListener(s,t)}},startChatStream:(e,t)=>{if(!e||!t){console.error("[Preload Script] startChatStream called with invalid sessionId or question.");return}console.log(`[Preload Script] Sending CHAT_STREAM_START for session: ${e}, question: "${t.substring(0,30)}..."`),o.ipcRenderer.send(m,{sessionId:e,question:t})},stopChatStream:()=>{console.log("[Preload Script] Sending CHAT_STREAM_STOP"),o.ipcRenderer.send(A)},onChatChunk:e=>{let t=(n,r)=>e(r);return o.ipcRenderer.on(i,t),()=>o.ipcRenderer.removeListener(i,t)},onChatStreamEnd:e=>{let t=(n,r)=>e(r);return o.ipcRenderer.on(l,t),()=>o.ipcRenderer.removeListener(l,t)},onChatStreamError:e=>{let t=(n,r)=>e(r);return o.ipcRenderer.on(a,t),()=>o.ipcRenderer.removeListener(a,t)},getMessages:(e,t,n)=>(console.log(`[Preload Script] Invoking getMessages for session: ${e}, limit: ${t}`),o.ipcRenderer.invoke(C,{sessionId:e,limit:t,beforeTimestamp:n})),getSliceDetails:e=>(console.log(`[Preload Script] Invoking getSliceDetails for ${e.length} IDs: [${e.slice(0,5).join(", ")}]...`),!Array.isArray(e)||e.some(t=>typeof t!="number")?(console.error("[Preload Script] getSliceDetails called with invalid input (must be array of numbers)."),Promise.reject(new Error("Invalid input: chunkIds must be an array of numbers."))):o.ipcRenderer.invoke(b,e)),setIntent:e=>(console.log("[Preload Script] Sending SET_INTENT with payload:",e.intentText.substring(0,50)+"..."),o.ipcRenderer.invoke(h,e)),onIntentResult:e=>{console.log("[Preload Script] Setting up listener for ON_INTENT_RESULT");let t=(n,r)=>{e(r)};return o.ipcRenderer.on(c,t),()=>{console.log("[Preload Script] Removing listener for ON_INTENT_RESULT"),o.ipcRenderer.removeListener(c,t)}},createNotebook:e=>(console.log(`[Preload Script] Invoking ${E}`),o.ipcRenderer.invoke(E,e)),getNotebookById:e=>(console.log(`[Preload Script] Invoking ${S} for ID: ${e}`),o.ipcRenderer.invoke(S,e)),getAllNotebooks:()=>(console.log(`[Preload Script] Invoking ${T}`),o.ipcRenderer.invoke(T)),updateNotebook:e=>(console.log(`[Preload Script] Invoking ${g} for ID: ${e.id}`),o.ipcRenderer.invoke(g,e)),deleteNotebook:e=>(console.log(`[Preload Script] Invoking ${_} for ID: ${e}`),o.ipcRenderer.invoke(_,e)),getChunksForNotebook:e=>(console.log(`[Preload Script] Invoking ${O} for notebook ID: ${e}`),o.ipcRenderer.invoke(O,e)),createChatInNotebook:e=>(console.log(`[Preload Script] Invoking ${p} for notebook ID: ${e.notebookId}`),o.ipcRenderer.invoke(p,e)),listChatsForNotebook:e=>(console.log(`[Preload Script] Invoking ${d} for notebook ID: ${e}`),o.ipcRenderer.invoke(d,e)),transferChatToNotebook:e=>(console.log(`[Preload Script] Invoking ${I} for session ID: ${e.sessionId}`),o.ipcRenderer.invoke(I,e)),storeGet:e=>(console.log(`[Preload Script] Invoking ${P} for key: ${e}`),o.ipcRenderer.invoke(P,e)),storeSet:(e,t)=>(console.log(`[Preload Script] Invoking ${v} for key: ${e}`),o.ipcRenderer.invoke(v,{key:e,value:t})),storeRemove:e=>(console.log(`[Preload Script] Invoking ${k} for key: ${e}`),o.ipcRenderer.invoke(k,e))};try{o.contextBridge.exposeInMainWorld("api",M),console.log("[Preload Script] API exposed successfully.")}catch(e){console.error("[Preload Script] Failed to expose API:",e)}
//# sourceMappingURL=preload.js.map
