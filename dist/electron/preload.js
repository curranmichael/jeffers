"use strict";var o=require("electron");var C="profile:get",u="bookmarks:import",k="file:saveTemp",s="bookmarks:progress",m="chat:stream:start",B="chat:stream:stop",i="chat:onResponseChunk",l="chat:onStreamEnd",a="chat:onStreamError",b="chat:getMessages",L="slices:getDetails",h="intent:set",c="intent:on-result",S="notebook:create",E="notebook:getById",_="notebook:getAll",g="notebook:update",T="notebook:delete",R="notebook:getChunks",d="chatSession:createInNotebook",O="chatSession:listForNotebook",p="chatSession:transferToNotebook",I="store:get",P="store:set",v="store:remove",f="main:request-renderer-flush",N="renderer:flush-complete",M="classicBrowser:initView",x="classicBrowser:loadUrl",D="classicBrowser:navigate",w="classicBrowser:syncView",A="classicBrowser:onStateUpdate",$="classicBrowser:destroy";console.log("[Preload Script] Loading...");var U={getAppVersion:()=>(console.log("[Preload Script] Requesting app version via IPC"),o.ipcRenderer.invoke("get-app-version")),getProfile:()=>(console.log("[Preload Script] Requesting profile via IPC"),o.ipcRenderer.invoke(C)),importBookmarks:e=>(console.log("[Preload Script] Invoking bookmarks import via IPC"),o.ipcRenderer.invoke(u,e)),saveTempFile:(e,r)=>(console.log("[Preload Script] Invoking save temp file via IPC"),o.ipcRenderer.invoke(k,{fileName:e,data:r})),onBookmarksProgress:e=>{console.log("[Preload Script] Setting up listener for",s);let r=(n,t)=>{e(t)};return o.ipcRenderer.on(s,r),()=>{console.log("[Preload Script] Removing listener for",s),o.ipcRenderer.removeListener(s,r)}},startChatStream:(e,r)=>{if(!e||!r){console.error("[Preload Script] startChatStream called with invalid sessionId or question.");return}console.log(`[Preload Script] Sending CHAT_STREAM_START for session: ${e}, question: "${r.substring(0,30)}..."`),o.ipcRenderer.send(m,{sessionId:e,question:r})},stopChatStream:()=>{console.log("[Preload Script] Sending CHAT_STREAM_STOP"),o.ipcRenderer.send(B)},onChatChunk:e=>{let r=(n,t)=>e(t);return o.ipcRenderer.on(i,r),()=>o.ipcRenderer.removeListener(i,r)},onChatStreamEnd:e=>{let r=(n,t)=>e(t);return o.ipcRenderer.on(l,r),()=>o.ipcRenderer.removeListener(l,r)},onChatStreamError:e=>{let r=(n,t)=>e(t);return o.ipcRenderer.on(a,r),()=>o.ipcRenderer.removeListener(a,r)},getMessages:(e,r,n)=>(console.log(`[Preload Script] Invoking getMessages for session: ${e}, limit: ${r}`),o.ipcRenderer.invoke(b,{sessionId:e,limit:r,beforeTimestamp:n})),getSliceDetails:e=>(console.log(`[Preload Script] Invoking getSliceDetails for ${e.length} IDs: [${e.slice(0,5).join(", ")}]...`),!Array.isArray(e)||e.some(r=>typeof r!="number")?(console.error("[Preload Script] getSliceDetails called with invalid input (must be array of numbers)."),Promise.reject(new Error("Invalid input: chunkIds must be an array of numbers."))):o.ipcRenderer.invoke(L,e)),setIntent:e=>(console.log("[Preload Script] Sending SET_INTENT with payload:",e.intentText.substring(0,50)+"..."),o.ipcRenderer.invoke(h,e)),onIntentResult:e=>{console.log("[Preload Script] Setting up listener for ON_INTENT_RESULT");let r=(n,t)=>{e(t)};return o.ipcRenderer.on(c,r),()=>{console.log("[Preload Script] Removing listener for ON_INTENT_RESULT"),o.ipcRenderer.removeListener(c,r)}},createNotebook:e=>(console.log(`[Preload Script] Invoking ${S}`),o.ipcRenderer.invoke(S,e)),getNotebookById:e=>(console.log(`[Preload Script] Invoking ${E} for ID: ${e}`),o.ipcRenderer.invoke(E,e)),getAllNotebooks:()=>(console.log(`[Preload Script] Invoking ${_}`),o.ipcRenderer.invoke(_)),updateNotebook:e=>(console.log(`[Preload Script] Invoking ${g} for ID: ${e.id}`),o.ipcRenderer.invoke(g,e)),deleteNotebook:e=>(console.log(`[Preload Script] Invoking ${T} for ID: ${e}`),o.ipcRenderer.invoke(T,e)),getChunksForNotebook:e=>(console.log(`[Preload Script] Invoking ${R} for notebook ID: ${e}`),o.ipcRenderer.invoke(R,e)),createChatInNotebook:e=>(console.log(`[Preload Script] Invoking ${d} for notebook ID: ${e.notebookId}`),o.ipcRenderer.invoke(d,e)),listChatsForNotebook:e=>(console.log(`[Preload Script] Invoking ${O} for notebook ID: ${e}`),o.ipcRenderer.invoke(O,e)),transferChatToNotebook:e=>(console.log(`[Preload Script] Invoking ${p} for session ID: ${e.sessionId}`),o.ipcRenderer.invoke(p,e)),storeGet:e=>(console.log(`[Preload Script] Invoking ${I} for key: ${e}`),o.ipcRenderer.invoke(I,e)),storeSet:(e,r)=>(console.log(`[Preload Script] Invoking ${P} for key: ${e}`),o.ipcRenderer.invoke(P,{key:e,value:r})),storeRemove:e=>(console.log(`[Preload Script] Invoking ${v} for key: ${e}`),o.ipcRenderer.invoke(v,e)),onMainRequestFlush:e=>{let r=async n=>{console.log("[Preload Script] Received MAIN_REQUEST_RENDERER_FLUSH");try{await e(),console.log("[Preload Script] Renderer flush callback completed. Sending RENDERER_FLUSH_COMPLETE."),o.ipcRenderer.send(N)}catch(t){console.error("[Preload Script] Error during renderer flush callback:",t),o.ipcRenderer.send(N)}};o.ipcRenderer.on(f,r)},classicBrowserLoadUrl:(e,r)=>(console.log(`[Preload Script] Invoking classicBrowserLoadUrl for window ${e} with URL ${r}`),o.ipcRenderer.invoke(x,{windowId:e,url:r})),classicBrowserNavigate:(e,r)=>(console.log(`[Preload Script] Invoking classicBrowserNavigate for window ${e}, action: ${r}`),o.ipcRenderer.invoke(D,{windowId:e,action:r})),onClassicBrowserStateUpdate:e=>{console.log("[Preload Script] Setting up listener for ON_CLASSIC_BROWSER_STATE_UPDATE");let r=(n,t)=>{e(t)};return o.ipcRenderer.on(A,r),()=>{console.log("[Preload Script] Removing listener for ON_CLASSIC_BROWSER_STATE_UPDATE"),o.ipcRenderer.removeListener(A,r)}},classicBrowserInitView:(e,r,n)=>(console.log(`[Preload Script] Initializing ClassicBrowser view ${e}`),o.ipcRenderer.invoke(M,{windowId:e,bounds:r,initialUrl:n})),classicBrowserSyncView:(e,r,n)=>o.ipcRenderer.invoke(w,{windowId:e,bounds:r,isVisible:n}),classicBrowserDestroy:e=>(console.log(`[Preload Script] Destroying ClassicBrowser view ${e}`),o.ipcRenderer.invoke($,{windowId:e}))};try{o.contextBridge.exposeInMainWorld("api",U),console.log("[Preload Script] API exposed successfully.")}catch(e){console.error("[Preload Script] Failed to expose API:",e)}
//# sourceMappingURL=preload.js.map
