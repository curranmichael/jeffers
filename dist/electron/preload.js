"use strict";var o=require("electron");var k="profile:get",m="profile:update",D="activity:log:add",L="bookmarks:import",B="file:saveTemp",s="bookmarks:progress",b="chat:stream:start",f="chat:stream:stop",i="chat:onResponseChunk",l="chat:onStreamEnd",a="chat:onStreamError",x="chat:getMessages",U="slices:getDetails",h="intent:set",c="intent:on-result",E="notebook:create",S="notebook:getById",_="notebook:getAll",T="notebook:update",d="notebook:delete",g="notebook:getChunks",O="chatSession:createInNotebook",I="chatSession:listForNotebook",R="chatSession:transferToNotebook",p="store:get",P="store:set",v="store:remove",M="main:request-renderer-flush",C="renderer:flush-complete",y="todo:create",w="todo:getAll",G="todo:getById",$="todo:update",H="todo:delete",K="browser:create",F="browser:navigate",W="browser:loadUrl",V="classic-browser:set-bounds",Y="classic-browser:set-visibility",A="on-classic-browser-state",q="browser:destroy",u="classic-browser-view-focused",N="classic-browser-request-focus";console.log("[Preload Script] Loading...");var Q={getAppVersion:()=>(console.log("[Preload Script] Requesting app version via IPC"),o.ipcRenderer.invoke("get-app-version")),getProfile:()=>(console.log("[Preload Script] Requesting profile via IPC"),o.ipcRenderer.invoke(k)),updateProfile:e=>(console.log("[Preload Script] Updating profile via IPC"),o.ipcRenderer.invoke(m,e)),logActivity:e=>(console.log("[Preload Script] Logging activity via IPC"),o.ipcRenderer.invoke(D,e)),importBookmarks:e=>(console.log("[Preload Script] Invoking bookmarks import via IPC"),o.ipcRenderer.invoke(L,e)),saveTempFile:(e,t)=>(console.log("[Preload Script] Invoking save temp file via IPC"),o.ipcRenderer.invoke(B,{fileName:e,data:t})),onBookmarksProgress:e=>{console.log("[Preload Script] Setting up listener for",s);let t=(n,r)=>{e(r)};return o.ipcRenderer.on(s,t),()=>{console.log("[Preload Script] Removing listener for",s),o.ipcRenderer.removeListener(s,t)}},startChatStream:e=>{let{notebookId:t,sessionId:n,question:r}=e;if(!t||!n||!r){console.error("[Preload Script] startChatStream called with invalid payload.",e);return}console.log(`[Preload Script] Sending CHAT_STREAM_START for notebook: ${t}, session: ${n}, question: "${r.substring(0,30)}..."`),o.ipcRenderer.send(b,e)},stopChatStream:()=>{console.log("[Preload Script] Sending CHAT_STREAM_STOP"),o.ipcRenderer.send(f)},onChatChunk:e=>{let t=(n,r)=>e(r);return o.ipcRenderer.on(i,t),()=>o.ipcRenderer.removeListener(i,t)},onChatStreamEnd:e=>{let t=(n,r)=>e(r);return o.ipcRenderer.on(l,t),()=>o.ipcRenderer.removeListener(l,t)},onChatStreamError:e=>{let t=(n,r)=>e(r);return o.ipcRenderer.on(a,t),()=>o.ipcRenderer.removeListener(a,t)},getMessages:(e,t,n)=>(console.log(`[Preload Script] Invoking getMessages for session: ${e}, limit: ${t}`),o.ipcRenderer.invoke(x,{sessionId:e,limit:t,beforeTimestamp:n})),getSliceDetails:e=>(console.log(`[Preload Script] Invoking getSliceDetails for ${e.length} IDs: [${e.slice(0,5).join(", ")}]...`),!Array.isArray(e)||e.some(t=>typeof t!="number")?(console.error("[Preload Script] getSliceDetails called with invalid input (must be array of numbers)."),Promise.reject(new Error("Invalid input: chunkIds must be an array of numbers."))):o.ipcRenderer.invoke(U,e)),setIntent:e=>(console.log("[Preload Script] Sending SET_INTENT with payload:",e.intentText.substring(0,50)+"..."),o.ipcRenderer.invoke(h,e)),onIntentResult:e=>{console.log("[Preload Script] Setting up listener for ON_INTENT_RESULT");let t=(n,r)=>{e(r)};return o.ipcRenderer.on(c,t),()=>{console.log("[Preload Script] Removing listener for ON_INTENT_RESULT"),o.ipcRenderer.removeListener(c,t)}},createNotebook:e=>(console.log(`[Preload Script] Invoking ${E}`),o.ipcRenderer.invoke(E,e)),getNotebookById:e=>(console.log(`[Preload Script] Invoking ${S} for ID: ${e}`),o.ipcRenderer.invoke(S,e)),getAllNotebooks:()=>(console.log(`[Preload Script] Invoking ${_}`),o.ipcRenderer.invoke(_)),updateNotebook:e=>(console.log(`[Preload Script] Invoking ${T} for ID: ${e.id}`),o.ipcRenderer.invoke(T,e)),deleteNotebook:e=>(console.log(`[Preload Script] Invoking ${d} for ID: ${e}`),o.ipcRenderer.invoke(d,e)),getChunksForNotebook:e=>(console.log(`[Preload Script] Invoking ${g} for notebook ID: ${e}`),o.ipcRenderer.invoke(g,e)),createChatInNotebook:e=>(console.log(`[Preload Script] Invoking ${O} for notebook ID: ${e.notebookId}`),o.ipcRenderer.invoke(O,e)),listChatsForNotebook:e=>(console.log(`[Preload Script] Invoking ${I} for notebook ID: ${e}`),o.ipcRenderer.invoke(I,e)),transferChatToNotebook:e=>(console.log(`[Preload Script] Invoking ${R} for session ID: ${e.sessionId}`),o.ipcRenderer.invoke(R,e)),storeGet:e=>(console.log(`[Preload Script] Invoking ${p} for key: ${e}`),o.ipcRenderer.invoke(p,e)),storeSet:(e,t)=>(console.log(`[Preload Script] Invoking ${P} for key: ${e}`),o.ipcRenderer.invoke(P,{key:e,value:t})),storeRemove:e=>(console.log(`[Preload Script] Invoking ${v} for key: ${e}`),o.ipcRenderer.invoke(v,e)),onMainRequestFlush:e=>{let t=async n=>{console.log("[Preload Script] Received MAIN_REQUEST_RENDERER_FLUSH");try{await e(),console.log("[Preload Script] Renderer flush callback completed. Sending RENDERER_FLUSH_COMPLETE."),o.ipcRenderer.send(C)}catch(r){console.error("[Preload Script] Error during renderer flush callback:",r),o.ipcRenderer.send(C)}};o.ipcRenderer.on(M,t)},classicBrowserCreate:(e,t,n)=>o.ipcRenderer.invoke(K,e,t,n),classicBrowserLoadUrl:(e,t)=>o.ipcRenderer.invoke(W,e,t),classicBrowserNavigate:(e,t)=>o.ipcRenderer.invoke(F,e,t),classicBrowserSetBounds:(e,t)=>{o.ipcRenderer.send(V,e,t)},classicBrowserSetVisibility:(e,t,n)=>{o.ipcRenderer.send(Y,e,t,n)},classicBrowserDestroy:e=>o.ipcRenderer.invoke(q,e),onClassicBrowserState:e=>{let t=(n,r)=>e(r);return o.ipcRenderer.on(A,t),()=>{o.ipcRenderer.removeListener(A,t)}},onClassicBrowserViewFocused:e=>{let t=(n,r)=>e(r);return o.ipcRenderer.on(u,t),()=>o.ipcRenderer.removeListener(u,t)},classicBrowserRequestFocus:e=>{console.log(`[Preload Script] Sending ${N} for windowId: ${e}`),o.ipcRenderer.send(N,e)},createToDo:e=>(console.log("[Preload Script] Creating todo via IPC"),o.ipcRenderer.invoke(y,e)),getToDos:e=>(console.log("[Preload Script] Getting todos via IPC"),o.ipcRenderer.invoke(w,e)),getToDoById:e=>(console.log("[Preload Script] Getting todo by ID via IPC"),o.ipcRenderer.invoke(G,e)),updateToDo:(e,t)=>(console.log("[Preload Script] Updating todo via IPC"),o.ipcRenderer.invoke($,{id:e,payload:t})),deleteToDo:e=>(console.log("[Preload Script] Deleting todo via IPC"),o.ipcRenderer.invoke(H,e))};try{o.contextBridge.exposeInMainWorld("api",Q),console.log("[Preload Script] API exposed successfully.")}catch(e){console.error("[Preload Script] Failed to expose API:",e)}
//# sourceMappingURL=preload.js.map
