{
  "version": 3,
  "sources": ["../../electron/preload.ts", "../../shared/ipcChannels.ts"],
  "sourcesContent": ["import { contextBridge, ipcRenderer } from 'electron';\n\n// Import channel constants and types from shared\nimport { PROFILE_GET, BOOKMARKS_IMPORT, FILE_SAVE_TEMP, BOOKMARKS_PROGRESS } from '../shared/ipcChannels';\nimport { IAppAPI, BookmarksProgressEvent } from '../shared/types'; // Assuming IAppAPI is in shared/types.d.ts\n\nconsole.log('[Preload Script] Loading...');\n\n// Define the API structure that will be exposed to the renderer\n// This should match the IAppAPI interface defined in shared/types.d.ts\nconst api = {\n  // Example function structure (uncomment and adapt when needed):\n  /*\n  exampleAction: (args: ExampleType): Promise<any> => {\n    console.log('[Preload Script] Calling exampleAction via IPC');\n    return ipcRenderer.invoke(CHANNEL_NAME_EXAMPLE, args);\n  },\n  */\n  // --- Add actual API functions here as features are implemented ---\n\n  // Simple example to confirm preload is working\n  getAppVersion: (): Promise<string> => {\n    console.log('[Preload Script] Requesting app version via IPC');\n    // We'll need to create a handler for this in main.ts later\n    return ipcRenderer.invoke('get-app-version'); // Note: This uses a string literal, should use GET_APP_VERSION constant\n  },\n\n  getProfile: (): Promise<{ name?: string }> => {\n    console.log('[Preload Script] Requesting profile via IPC');\n    return ipcRenderer.invoke(PROFILE_GET);\n  },\n\n  // Add importBookmarks function\n  importBookmarks: (filePath: string): Promise<number> => {\n    console.log('[Preload Script] Invoking bookmarks import via IPC');\n    return ipcRenderer.invoke(BOOKMARKS_IMPORT, filePath);\n  },\n\n  // Add saveTempFile function\n  saveTempFile: (fileName: string, data: Uint8Array): Promise<string> => {\n    console.log('[Preload Script] Invoking save temp file via IPC');\n    // Pass data directly; IPC handles serialization of Uint8Array/Buffer\n    return ipcRenderer.invoke(FILE_SAVE_TEMP, { fileName, data });\n  },\n\n  // Add listener for bookmark progress\n  onBookmarksProgress: (callback: (event: BookmarksProgressEvent) => void) => {\n    console.log('[Preload Script] Setting up listener for', BOOKMARKS_PROGRESS);\n    const listener = (_event: Electron.IpcRendererEvent, event: BookmarksProgressEvent) => {\n      // Basic validation of received data structure could be added here\n      // console.debug('[Preload Script] Received bookmark progress:', event);\n      callback(event);\n    };\n    ipcRenderer.on(BOOKMARKS_PROGRESS, listener);\n    // Return a function to remove this specific listener\n    return () => {\n      console.log('[Preload Script] Removing listener for', BOOKMARKS_PROGRESS);\n      ipcRenderer.removeListener(BOOKMARKS_PROGRESS, listener);\n    };\n  },\n};\n\n// Securely expose the defined API to the renderer process\ntry {\n  // Use 'satisfies' to check the api object against the interface\n  contextBridge.exposeInMainWorld('api', api satisfies IAppAPI);\n  console.log('[Preload Script] API exposed successfully.');\n} catch (error) {\n  console.error('[Preload Script] Failed to expose API:', error);\n}\n\n// Type definition for the API (to be placed in shared/types.d.ts)\n/*\ndeclare global {\n  interface Window {\n    api: IAppAPI;\n  }\n}\n\nexport interface IAppAPI {\n  // Signatures for the methods exposed above\n  getAppVersion: () => Promise<string>;\n  // exampleAction: (args: ExampleType) => Promise<any>;\n  // ... other method signatures\n}\n*/\n", "// This file defines the string constants used for IPC channel names.\n// Follow naming conventions (e.g., NOUN_VERB or feature:action).\n// Example: export const NOTEBOOK_SAVE = 'notebook:save';\n\n/** Simple channel for renderer to check main process version. */\nexport const GET_APP_VERSION = 'get-app-version';\n\n// Profile channels\n/** Get the current user profile information. */\nexport const PROFILE_GET = 'profile:get';\n\n/** Start the import process for a bookmarks file (HTML/JSON). Expects temp file path. */\nexport const BOOKMARKS_IMPORT = 'bookmarks:import';\n\n// File operations\n/** Save uploaded file data to a temporary location. Expects { fileName, data }. Returns absolute path. */\nexport const FILE_SAVE_TEMP = 'file:saveTemp';\n\n// Bookmark ingestion progress event\n/** Event channel for broadcasting bookmark import progress updates. */\nexport const BOOKMARKS_PROGRESS = 'bookmarks:progress';\n"],
  "mappings": ";;;AAAA,sBAA2C;;;ACSpC,IAAM,cAAc;AAGpB,IAAM,mBAAmB;AAIzB,IAAM,iBAAiB;AAIvB,IAAM,qBAAqB;;;ADdlC,QAAQ,IAAI,6BAA6B;AAIzC,IAAM,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWV,eAAe,MAAuB;AACpC,YAAQ,IAAI,iDAAiD;AAE7D,WAAO,4BAAY,OAAO,iBAAiB;AAAA,EAC7C;AAAA,EAEA,YAAY,MAAkC;AAC5C,YAAQ,IAAI,6CAA6C;AACzD,WAAO,4BAAY,OAAO,WAAW;AAAA,EACvC;AAAA;AAAA,EAGA,iBAAiB,CAAC,aAAsC;AACtD,YAAQ,IAAI,oDAAoD;AAChE,WAAO,4BAAY,OAAO,kBAAkB,QAAQ;AAAA,EACtD;AAAA;AAAA,EAGA,cAAc,CAAC,UAAkB,SAAsC;AACrE,YAAQ,IAAI,kDAAkD;AAE9D,WAAO,4BAAY,OAAO,gBAAgB,EAAE,UAAU,KAAK,CAAC;AAAA,EAC9D;AAAA;AAAA,EAGA,qBAAqB,CAAC,aAAsD;AAC1E,YAAQ,IAAI,4CAA4C,kBAAkB;AAC1E,UAAM,WAAW,CAAC,QAAmC,UAAkC;AAGrF,eAAS,KAAK;AAAA,IAChB;AACA,gCAAY,GAAG,oBAAoB,QAAQ;AAE3C,WAAO,MAAM;AACX,cAAQ,IAAI,0CAA0C,kBAAkB;AACxE,kCAAY,eAAe,oBAAoB,QAAQ;AAAA,IACzD;AAAA,EACF;AACF;AAGA,IAAI;AAEF,gCAAc,kBAAkB,OAAO,GAAqB;AAC5D,UAAQ,IAAI,4CAA4C;AAC1D,SAAS,OAAO;AACd,UAAQ,MAAM,0CAA0C,KAAK;AAC/D;",
  "names": []
}
