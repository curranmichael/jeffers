---
description: 
globs: *.tsx
alwaysApply: false
---
# Cursor Rules: Renderer (Frontend - `src/`)

This file defines rules for the frontend application within `src/` (Next.js/React). The renderer runs in a sandboxed environment (`contextIsolation: true`).

These rules ensure the frontend remains secure, focused on UI, and interacts correctly with the backend via `window.api`.

---

## 1. No Direct Node.js or Electron API Access

-   **Rule:** Code in `src/` **must** operate as a web browser environment. No direct Node.js (`fs`, `path`) or Electron (`ipcRenderer` direct use, `shell`) API access.
-   **Rationale:** Context isolation. All backend interaction via `window.api`.

## 2. Use the Preload API (`window.api`) Exclusively

-   **Rule:** All communication with the Electron main process **must** use functions on `window.api`.
-   **Rationale:** Secure, defined interface, decouples frontend from backend IPC details.

## 3. Global State Management with Zustand (`src/store/windowStoreFactory.ts`)

-   **Rule:** The primary client-side state for the windowing environment (e.g., list of open windows, their metadata: `id`, `type`, `title`, `x`, `y`, `width`, `height`, `zIndex`, `isFocused`, `payload`) **must** be managed using notebook-specific Zustand store instances created by a factory function (e.g., `createNotebookWindowStore`) located in `src/store/windowStoreFactory.ts`.
-   **Rule:** A mechanism (e.g., React Context or a root component) **must** manage which notebook-specific store instance is currently active and provide it to the relevant parts of the UI (primarily `DesktopPage`).
-   **Rule:** The `payload` for each window's metadata should be typed according to the window's content (e.g., `ChatWindowPayload { sessionId: string }`, `BrowserWindowPayload { currentUrl: string, requestedUrl: string, isLoading: boolean, ... }`).
-   **Rule:** Actions to modify window state (add, remove, update position/size, set focus, update content-specific payload) **must** be defined as actions within the Zustand store definition used by the factory.
-   **Rationale:** Centralized, predictable state management for the complex UI, scoped per notebook. Facilitates persistence and cross-component communication for window states within a notebook context.

## 4. Main Application Structure (`DesktopPage`, Window Components)

-   **Rule:** The primary interactive UI **must** be hosted within a main Next.js page component (e.g., `src/app/desktop/page.tsx`, referred to as `DesktopPage`). This page will serve as the "desktop" environment.
-   **Rule:** `DesktopPage` **must** obtain the *active* notebook's Zustand window store instance and subscribe to it. It must dynamically render window components based on the active store's state.
-   **Rule:** `DesktopPage` **must not** attempt to create/hydrate the notebook-specific store instance until the active `notebookId` is known (e.g., wait for router readiness or receive it via props/context). This ensures correct layout hydration.
-   **Rule:** A generic `<WindowFrame />` component (e.g., in `src/components/layout/`) **must** be used to provide common window chrome (title bar, borders, close/actions) and handle dragging/resizing (e.g., using `react-rnd`). It will receive window metadata and content as props.
-   **Rule:** Specific content for different window types (e.g., chat, browser) **must** be implemented as separate React components (e.g., `<ChatWindowContent />`, `<BrowserViewWrapper />` in `src/components/apps/...`) rendered inside `<WindowFrame />`. These components will receive their specific `payload` from the `windowmeta`.

## 5. Next.js Usage in Windowing Environment

-   **Rule:** While Next.js structures the overall application and serves the initial `DesktopPage` (and other pages like `WelcomePage`, `LibraryPage`), the windowing system within `DesktopPage` operates like a Single Page Application (SPA).
-   **Rule:** Opening, closing, or focusing windows within the `DesktopPage` **must** be handled by updating the *active notebook's* Zustand window store, not by Next.js page navigations.
-   **Rule:** Deep-linking to open specific windows or notebook contexts on `DesktopPage` load **should** be handled by parsing URL query parameters in `DesktopPage`, determining the target `notebookId`, obtaining/creating the correct store instance, and then dispatching initial actions to that store.
-   **Rationale:** Clarifies Next.js's role in supporting the SPA-like desktop environment.

## 6. Component Responsibilities

-   **UI Elements (`src/components/ui/`):** Use shadcn/ui components as base building blocks. Import with `@/components/ui/`. Add new components via CLI.
-   **Window Content (`src/components/apps/`):** House the specific React components that render the content for different window types. These components manage their internal state or fetch data via `window.api` based on their `payload` (e.g., `sessionId` for chat, `url` for browser).
-   **Layout (`src/components/layout/`):** For `<DesktopPage />` structure, `<WindowFrame />`, global command palette UI.
-   **Styling:** Rely on Tailwind CSS.

## 7. Handle API Errors Gracefully

-   **Rule:** `window.api` calls (Promises) **must** include error handling (`try...catch` or `.catch()`).
-   **Rationale:** Backend ops can fail; UI must handle this. Display user-friendly feedback.

---
Following these Renderer rules ensures the frontend remains secure, performs well, and interacts correctly with the Electron backend through `window.api` and the Zustand-based windowing architecture.