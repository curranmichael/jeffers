---
description: 
globs: 
alwaysApply: true
---
# Cursor Rules: Data Models Layer (`models/`)

This file outlines the rules for implementing the data persistence layer within the `models/` directory. Modules here are responsible for all direct interactions with storage (SQLite via `better-sqlite3`).

These rules ensure data access is encapsulated, consistent, and separated from business logic.

---

## Core Data Entities

### Object (`JeffersObject`)
-   **Definition:** (As per General Custom Instructions) A top-level entity ingested into the system. Represents original source content. Corresponds to an `objects` table (or `source_content`).
-   **Managed by:** `ObjectModel.ts` (or similar).

### Chunk
-   **Definition:** (As per General Custom Instructions) A semantically coherent slice of an `OBJECT`. Stored in the `chunks` table.
-   **Managed by:** `ChunkSqlModel.ts` (or similar).
-   **Relationship to Notebooks:** The `chunks` table **must** have a `notebook_id` column (TEXT, NULLABLE, FOREIGN KEY to `notebooks.id ON DELETE SET NULL`). This ensures that if a notebook is deleted, its associated chunks are not deleted but merely disassociated (their `notebook_id` becomes NULL). This allows chunks to potentially be re-assigned or exist independently.

### Notebook
-   **Definition:** A user-facing workspace.
-   **Dual Nature:**
    1.  **As a User Container (`NotebookRecord`):** Manages title, description, user organization. Persisted in `notebooks` table by `NotebookModel.ts`.
    2.  **As System Content (`JeffersObject`):** The notebook's essence (title, description) is also stored as a `JeffersObject` (e.g., `objectType: 'notebook'`) by `ObjectModel.ts`. This makes the notebook itself discoverable and part of the RAG context.
-   **Relationships:**
    *   Groups related `CHAT_SESSIONS`.
    *   Conceptually groups `CHUNKS` (either directly via `chunks.notebook_id` or indirectly if a notebook is a collection of `JeffersObject`s which then have chunks).

### Chat Session (`IChatSession`)
-   **Definition:** A single conversation thread.
-   **Persistence:** Stored in `chat_sessions` table by `ChatModel.ts`.
-   **Relationship to Notebooks:** Each chat session **must** belong to exactly one `Notebook`.
    *   `chat_sessions` table has `notebook_id` (TEXT, **NOT NULL**, FOREIGN KEY to `notebooks.id ON DELETE CASCADE`). This ensures if a notebook is deleted, all its chat sessions (and their messages) are also deleted.
-   **Relationship to Messages:** Each chat session contains multiple `IChatMessage`s.

### Chat Message (`IChatMessage`)
-   **Definition:** A single message within a `ChatSession`.
-   **Persistence:** Stored in `chat_messages` table by `ChatModel.ts`.
-   **Relationship to Chat Session:** Each message **must** belong to exactly one `ChatSession`.
    *   `chat_messages` table has `session_id` (TEXT, **NOT NULL**, FOREIGN KEY to `chat_sessions.session_id ON DELETE CASCADE`).

---
## 1. Single Responsibility: Raw Data Access

-   **Rule:** Each module in `models/` focuses on a specific data entity or storage type. Provides low-level CRUD and query operations.
-   **Rationale:** Organization, reusability, isolation of storage dependencies.

## 2. Return Plain Data Structures

-   **Rule:** Model functions **must** return simple, plain data structures (matching interfaces in `shared/types.ts`), not complex class instances or DB-specific objects.
-   **Rationale:** Decouples layers, ensures serializability for IPC.

## 3. No Cross-Model Dependencies

-   **Rule:** A model module **must not** directly import or call functions from another model module. Coordination happens in `services/`.
-   **Rationale:** Prevents tangled dependencies, keeps models focused.

## 4. Use User Data Directory for All Persistent Storage

-   **Rule:**
    *   SQLite database files (e.g., `jeffers_default.db`) **must** be stored within the user data directory (e.g., obtained via `app.getPath('userData')` in Electron, then placed in a subdirectory like `data/`).
    *   Vector store data (e.g., ChromaDB) **should** be managed by its server process (e.g., within `data/chroma_data` in user data path, or per its own configuration).
    *   **Application state files** (like persisted window layouts for notebooks) **must** also be stored in the user data directory (e.g., `app.getPath('userData')/layouts/notebook-layout-[notebookId].json`). These are managed by main process file utilities, not directly by `models/`.
    *   User-uploaded files or temporary files generated during ingestion should also use appropriate subdirectories within the user data path or OS temp directories.
-   **Rationale:** Centralizes application data, separates from source code, simplifies backup.

## 5. No Business Logic or Decisions

-   **Rule:** Model functions **must not** contain application-specific business rules. Logic is limited to data retrieval, storage, and basic integrity constraints.
-   **Rationale:** Pure data access. Business logic belongs in `services/`.

## 6. Isolation, Reusability, and Side Effects

-   **Rule:** Model functions should be reusable and free of side effects beyond their data access task.
-   **Rule:** Implement batching (e.g., `WHERE id IN (...)`) for reads where appropriate to avoid N+1 queries.
-   **Rationale:** Predictability, performance.

## 7. ID Management, Schema Evolution & Data Handling

-   **Rule (ID Standardization):** Long-term goal: UUIDs for all primary keys.
-   **Rule (ID Consistency):** `chunk_id` is canonical. Chroma vector IDs/metadata use or link to canonical `chunk_id`.
-   **Rule (Schema - Additive Changes):** Additive, non-breaking schema changes **SHOULD** allow lazy backfill. Data access logic **MUST** handle missing fields gracefully.
-   **Rule (Schema - Complex Changes):** Destructive or complex schema changes require explicit migration scripts (`models/migrations/`).
-   **Rule (Schema - `notebooks` table):**
    *   `id` (TEXT PRIMARY KEY - UUID)
    *   `title` (TEXT NOT NULL)
    *   `description` (TEXT)
    *   `created_at` (INTEGER NOT NULL)
    *   `updated_at` (INTEGER NOT NULL)
-   **Rule (Schema - `chat_sessions` table):**
    *   `session_id` (TEXT PRIMARY KEY - UUID)
    *   `notebook_id` (TEXT **NOT NULL**, FOREIGN KEY to `notebooks.id ON DELETE CASCADE`)
    *   `title` (TEXT) - Optional title for the specific chat session.
    *   `created_at` (INTEGER NOT NULL)
    *   `updated_at` (INTEGER NOT NULL)
-   **Rule (Schema - `chat_messages` table):**
    *   `message_id` (TEXT PRIMARY KEY - UUID)
    *   `session_id` (TEXT **NOT NULL**, FOREIGN KEY to `chat_sessions.session_id ON DELETE CASCADE`)
    *   `role` (TEXT NOT NULL, e.g., 'user', 'assistant')
    *   `content` (TEXT NOT NULL)
    *   `timestamp` (TEXT NOT NULL, ISO8601 string)
    *   `metadata` (TEXT, JSON string - e.g., for `sourceChunkIds`)
-   **Rationale:** Smooth evolution, data integrity, clear schema for key entities.

## 8. ChromaDB Integration

-   **Rule:** ChromaDB **must** run in server mode. Applications interact via client library to server endpoint.
-   **Rationale:** Avoids file locking, ASAR issues, allows potential sharing.

## Naming Conventions and Data Mapping

To ensure consistency, clarity, and maintainability between the database schema and the application code, the following naming conventions and mapping practices **must** be followed:

*   **Rule (Database Naming):**
    *   Database table names **must** be `snake_case` and typically plural (e.g., `notebooks`, `chat_sessions`, `object_chunks`).
    *   Database column names **must** be `snake_case` (e.g., `notebook_id`, `created_at`, `object_id`).
*   **Rule (Application-Level Naming):**
    *   TypeScript interfaces and type aliases representing data entities (e.g., in `shared/types.d.ts`) **must** use `camelCase` for their properties (e.g., `notebookId`, `createdAt`, `objectId`).
    *   Model filenames **must** be `PascalCaseModel.ts` (e.g., `NotebookModel.ts`).
    *   Model class names **must** be `PascalCase` matching the filename (e.g., `NotebookModel`).
    *   Model public method names **should** be `camelCase` and often reflect CRUD-like operations (e.g., `getById`, `create`, `updateAll`).
*   **Rule (Bidirectional Data Mapping in Models):**
    *   **DB-to-Application Mapping:** Each model class (e.g., `NotebookModel.ts`, `ChunkSqlModel.ts`) **must** implement private helper functions to translate raw database records (with `snake_case` columns) into application-level objects (with `camelCase` properties).
        *   These mapping functions **should** follow a predictable naming convention, typically `mapRecordToEntityName` (e.g., `mapRecordToNotebook`, `mapRecordToChunk`).
        *   They are responsible for any necessary type conversions, such as converting database timestamp representations into JavaScript `Date` objects.
    *   **Application-to-DB Mapping:** Conversely, when writing data to the database (e.g., in `create` or `update` methods), model methods **must** ensure that `camelCase` properties from application objects are correctly mapped to their corresponding `snake_case` column names in SQL statements. This typically involves constructing a parameters object for prepared statements where keys match `snake_case` database columns (e.g., `{ text_column: entity.textColumn }`) or using `@snake_case_param_name` in SQL query strings. This mapping logic **must** reside within the model layer, not in services or other layers.
*   **Rule (Timestamp Handling):**
    *   Timestamps in the database (e.g., `created_at`, `updated_at`, `parsed_at`) **should** be standardized as `INTEGER` representing Unix epoch milliseconds. This aligns with common practice in many existing migrations and simplifies direct numeric comparisons or sorting in SQL.
    *   Model mapping functions (`mapRecordToEntityName`) **must** convert these Unix epoch millisecond values into JavaScript `Date` objects when reading data for application use.
    *   When writing data, JavaScript `Date` objects **must** be converted back to Unix epoch milliseconds before being stored in the database.
*   **Rationale:** This explicit separation and bidirectional mapping within the model layer prevent "leaky schema," where database naming conventions or raw data types inadvertently permeate application code. It provides a consistent `camelCase` and appropriately typed (e.g., `Date` objects) interface for services and the UI. This improves developer experience, reduces cognitive load, enhances type safety, and centralizes the logic for data transformation.
*   **Guidance (Utility Functions):** While small, focused utility functions (e.g., a generic `snakeToCamel<T>` or `entityToDbParams<T>`) can be considered for reducing boilerplate in mappers, handwritten mappers and parameter construction are perfectly acceptable and often clearer for specific entity transformations, especially in a moderately sized codebase.

## Documentation of Schema Elements

*   **Rule (Unused Columns):** If database columns are intentionally kept for future use but are not currently mapped or used in the application (e.g., `chat_sessions.user_id`), they **should** be clearly commented within the SQL migration scripts or relevant schema definition documentation.
*   **Rationale:** This prevents accidental removal during "cleanup" efforts and communicates their forward-compatibility purpose to other developers.

Following these Model Layer rules ensures data persistence is robust, maintainable, and separated from business logic.