---
description: 
globs: 
alwaysApply: false
---
# Cursor Rules: 00 - Overview and Project Structure

*AI Assistant – LLM‑parsable architecture contract*

> **Terse by design.** Everything here is intended for programmatic reading by the AI. Remove explanations, keep only declarative facts. When the architecture changes, update this file **first**.
> Pay careful attention to consistency and maintainability in the codeback. If any logic or naming conventions seem potentially misaligned, or you come across code that seems duplicative, unused, or in any way messy, stop and point it out.

Vision & Goals

- Calm workspace – minimise cognitive load while working across chat, canvas, and embedded webviews.
- AI‑assisted workflows – first‑class chat, retrieval, and agent orchestration.
- Persistent context – long‑term knowledge retention via vector search and notebooks.
- Maintainable & scalable – conventional architecture, strict boundaries, continuous test coverage.

---

Data Model Concepts

*   **OBJECT:** A top-level entity ingested into the system (e.g., bookmark, document, note). Represents the original source content. Corresponds to the `source_content` table (or a general `objects` table).
*   **CHUNK:** A semantically coherent slice of an `OBJECT`, sized for LLM context and retrieval. Generated during ingestion. Stored in the `chunks` table.
*   **NODE:** A conceptual unit the UI can focus on. Can be an `OBJECT`, a `CHUNK`, a UI element (e.g., **a window in the desktop environment**, canvas shape), or a synthetic result (e.g., RAG-generated applet). Primarily exists at the UI/Interaction layer.
*   **EDGE:** A directed transition between two `NODEs`, capturing user navigation and attention (timestamp, dwell time). Represents user behavior, potentially persisted for analytics. *(This is a forward-looking concept, relevant for understanding user flow between windows or tasks later).*

---

## 0 Implementation Guidelines

* One thing at a time. Do not implement multiple things at once.
* Only implement changes related to the prompt.
* When unsure, ask or provide multiple options. Make sure you're confident in the changes
* Refer to the rules and guidelines as much as possible. If you see something that doesn't make sense, bring it up but don't change the rules without asking.

---

## 1 Folder Map

This describes the primary source code organization for the Next.js (renderer) and Electron (main process) application.

*   **`electron/`**: Electron-specific main process code.
    *   `main.ts`: Main process entry point, `BrowserWindow` creation, IPC registration.
    *   `preload.ts`: Preload script exposing `window.api` to the renderer.
    *   `ipc/`: Dedicated handlers for specific IPC channels.
    *   `workers/`: Background worker scripts (e.g., for heavy computations).
*   **`models/`**: Data persistence layer. Interacts directly with SQLite and other storage.
    *   `db.ts`: Database connection setup.
    *   `ChatModel.ts`, `NotebookModel.ts`, `ObjectModel.ts`, `ChunkSqlModel.ts`, etc.
    *   `migrations/`: Database schema migration scripts.
*   **`services/`**: Backend business logic, orchestration.
    *   `ChatService.ts`, `NotebookService.ts`, `IntentService.ts`, `SliceService.ts`, etc.
    *   `agents/`: AI agent capabilities and orchestrators (e.g., `LangchainAgent.ts`, `AgentService.ts`).
        *   `tools/`: Specific tools used by agents.
*   **`shared/`**: Code shared between main and renderer processes.
    *   `types.d.ts`: Core TypeScript type definitions (data structures, `IAppAPI`).
    *   `ipcChannels.ts`: Constants for IPC channel names.
*   **`src/`**: Frontend Next.js application code (renderer process).
    *   `app/`: Next.js App Router.
        *   `page.tsx` (`WelcomePage`): Initial intent input page.
        *   `desktop/page.tsx` (`DesktopPage`): Hosts the main windowing environment.
        *   `library/page.tsx` (`LibraryPage`): For browsing notebooks/objects.
        *   `settings/page.tsx`: Application settings.
    *   `components/`: Reusable React components.
        *   `ui/`: Core UI elements (many from shadcn/ui).
        *   `layout/`: Components defining major screen structures (e.g., `<DesktopPage />` structure, `<WindowFrame />`).
        *   `dialogs/`: Dialog components.
        *   `apps/`: Feature-specific components for window content (e.g., `src/components/apps/chat/ChatWindowContent.tsx`, `src/components/apps/browser/BrowserViewWrapper.tsx`).
    *   `hooks/`: Custom React hooks.
    *   `store/`: Global client-side state management.
        *   `windowStoreFactory.ts`: Factory function to create notebook-specific Zustand stores for window metadata.
        *   *(Potentially a root store or context to manage the *active* notebook's window store instance).*
    *   `lib/` or `utils/`: Frontend-specific utility functions, constants, types.
*   **`public/`**: Static assets served by Next.js.
*   **`utils/`**: General utility functions usable by both backend and potentially frontend (if not UI-specific).

No other top-level source folders unless specified here. Adhere strictly to this structure.

---

## 2 Runtime Boundaries

*   **Renderer Process (Frontend - `src/`)**:
    *   **UI Layer (`src/app/`, `src/components/`):** Responsible for rendering the main application shell (`DesktopPage`), individual window frames (`<WindowFrame />`), and the content within those windows (e.g., chat UI, browser content wrapper). Handles user interaction.
    *   **Logic Layer (`src/store/windowStoreFactory.ts`, `src/hooks/`):** Manages the state of the windowing environment (window positions, sizes, content, focus) using notebook-specific Zustand store instances. Custom hooks encapsulate reusable UI logic.
    *   **Communication:** Interacts with the backend *exclusively* through `window.api` (defined in `electron/preload.ts`).
*   **Main Process (Backend - `electron/`, `services/`, `models/`)**:
    *   **IPC Handlers (`electron/ipc/`):** Thin layer receiving requests from `window.api`, validating inputs, and calling appropriate services. Also sends asynchronous events/updates back to the renderer.
    *   **Service Layer (`services/`):** Contains core business logic and orchestration.
        *   `IntentService`: Parses user commands from the command palette, orchestrates actions like window manipulation, notebook/chat operations, or invoking AI agents.
        *   `NotebookService`, `ChatService`, `SliceService`, etc.: Handle specific domain logic.
        *   `AgentService`: Manages complex AI tasks using LangGraph.
        *   *(Conceptual) `BrowserViewManagementService`*: Manages the lifecycle and state of `Electron.BrowserView` instances.
    *   **Data Model Layer (`models/`):** Handles all direct data persistence (SQLite via `better-sqlite3`).
    *   **Agent Layer (`services/agents/`):** Encapsulates AI capabilities.
*   **Shared (`shared/`)**: Provides common type definitions and IPC channel constants to maintain a clear contract between renderer and main processes.

**Strict separation:** The Renderer process has no direct access to Node.js APIs (beyond what's exposed by `window.api`), file system, or backend services/models. The Main process has no direct access to or knowledge of React components or Zustand stores (it communicates state changes *to* the renderer, which then updates its own stores).
