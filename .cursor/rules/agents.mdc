---
description: 
globs: 
alwaysApply: true
---
# Cursor Rules: AI Agents (`agents/` or `services/agents/`)

This file defines the rules and guidelines for implementing AI agents within the `agents/` or `services/agents/` directory. Agents encapsulate specific AI-driven capabilities or autonomous behaviors (e.g., web searching, text summarization, information retrieval) used by the application, primarily orchestrated by the `services/` layer, especially `AgentService` and `IntentService`.

These rules ensure that AI capabilities are modular, maintainable, and integrated cleanly into the overall architecture.

---

## 1. Encapsulation of Distinct AI Capabilities

-   **Rule:** Each module (e.g., file or subdirectory) within `agents/` or `services/agents/tools/` **must** represent a distinct AI capability (e.g., `WebSearchTool`, `RetrievalTool`, `SummarizationCapability`) or a self-contained tool for an orchestrator. These are the building blocks used by higher-level orchestrators like `AgentService`.
-   **Rationale:** Promotes modularity and separation of concerns, making it easier to develop, test, update, or replace specific AI functionalities without impacting others.
-   **Guidance:** Agents should expose a clear, high-level public interface (e.g., a class with methods like `execute(task)` or specific functions like `searchWeb(query)`). Services interact with agents solely through this public API.

## 2. Interaction with Other Layers (Models, Services, Tools)

-   **Rule:** Agents can interact with other layers as needed to perform their tasks:
    *   They **may** call functions in `models/` to retrieve or (less commonly) store data directly related to their function (e.g., a `RetrievalAgent` querying a vector database via `VectorModel`).
    *   They **may** use utility functions from `shared/` or top-level `utils/`.
    *   They **may** use helper functions or classes defined within `agents/` itself (e.g., a base agent class, common prompt formatters).
    *   They **should generally not** call other `services/` directly to avoid circular dependencies, unless a clear pattern like using a foundational "LLMService" is established. Orchestration typically flows from `IntentService` -> `AgentService` -> Agents/Tools.
-   **Rationale:** Allows agents to leverage existing data access and utilities while maintaining focus on their core AI logic. Prevents agents from becoming overly coupled or duplicating functionality.
-   **Guidance:** Any interaction with external resources (APIs, web scraping) or complex tooling should be encapsulated within the agent or potentially delegated to specific helper modules (sometimes referred to as "tools" in an agent context).

## 3. Isolation from UI and Primary Persistence Logic

-   **Rule:** Agents operate within the main process and **must not** have any awareness of or dependency on the UI (`src/`) or Electron-specific APIs (`ipcMain`, `BrowserWindow`, etc.) not directly related to their core function (e.g. an agent that *controls* a browser view would be an exception, but would be invoked by a service).
-   **Rule:** Agents **should generally not** be responsible for primary data persistence. If an agent generates data (e.g., a summary, search results) that needs to be saved long-term, it **must** return this data to the calling service (`AgentService` or `IntentService`), which then uses the appropriate `models/` function to persist it.
-   **Rationale:** Maintains the layered architecture. Keeps agents focused on their AI task rather than application state management or UI presentation. Centralizes persistence logic within `models/` as orchestrated by `services/`.
-   **Exception:** Agents *may* manage their own internal cache or short-term memory if necessary for their operation, but this should be encapsulated.

## 4. Agent Orchestration, State Management, and Design

-   **Rule (Orchestrator Service):** A dedicated service, `AgentService` (located in `services/AgentService.ts`), **must** be responsible for orchestrating complex, multi-step AI tasks. `IntentService` may initiate tasks that are then delegated to `AgentService` for execution.
-   **Rule (LangGraph for Orchestrator):** The `AgentService` uses LangGraph to manage execution flow, state, and tool invocation. Non-LangGraph usages should be explicitly noted.
-   **Rule (Agent/Tool State):**
    *   The execution state for tasks managed by `AgentService` **must** be explicitly managed within the LangGraph state object. For long-running or resumable tasks, consider using LangGraph's built-in checkpointing capabilities to persist state.
    *   Individual atomic agents/tools invoked by the orchestrator should aim to be stateless per invocation. If a tool requires internal state, it must manage it explicitly and provide clear methods for initialization or reset by the orchestrator.
-   **Rule (Chat History for RAG):** Persistent chat history for specific Notebook sessions (and their contained chat sessions) is stored in the database (`chat_messages` table) via `ChatModel`. The RAG component/tool used by `AgentService` retrieves this history via `ChatModel` when needed.
-   **Rationale:** Explicit orchestration provides robustness. Clear separation of state concerns simplifies development.
-   **Guidance:** Keep the orchestrator's graph definition clear. Individual nodes should encapsulate discrete steps.

## 5. Tool Definition and Integration (for AgentService)

-   **Rule:** Tools used by the `AgentService` (LangGraph orchestrator) **should** ideally be LangChain `Tool` subclasses or composable LCEL `Runnables`.
-   **Rule:** Tools **must** receive their dependencies (e.g., `NotebookService`, API clients, model instances) via their constructor or an initialization method called by `AgentService`.
-   **Rule:** Tools **should** be located in `services/agents/tools/` or a similar dedicated directory. Simpler, more general AI capabilities might still reside in `agents/`.
-   **Rationale:** Promotes modularity and reusability.

## 6. Robust Error Handling (Expanded)

-   **Rule:** Agents and Tools **must** handle potential errors gracefully.
-   **Rule (Orchestrator Error Handling):** The `AgentService` (LangGraph orchestrator) **must** define error handling strategies within its graph.
-   **Rule:** Throw meaningful, structured exceptions back to the calling service or orchestrator node.
-   **Rationale:** Prevents crashes, allows for reaction to failures.
-   **Guidance:** Avoid silent failures. Ensure errors provide context.

## 7. Modularity and Documentation

-   **Rule:** Follow consistent patterns. Document purpose, API, configuration, and failure modes.
-   **Rationale:** Ensures organization and maintainability.
-   **Guidance:** Avoid complex direct interactions *between* agents. Coordination belongs in a higher-level service or orchestrator.
---

By following these AI Agent rules, we ensure that AI capabilities are developed in a modular, maintainable, and well-integrated manner, supporting both current needs and future evolution towards more complex multi-agent systems.