---
description: 
globs: 
alwaysApply: true
---
# Cursor Rules: IPC Handlers (`electron/ipc/`)

This file defines the rules for implementing Inter-Process Communication (IPC) handlers within the `electron/ipc/` directory. These handlers are responsible for receiving messages from the renderer process (via the `window.api` interface exposed by `electron/preload.ts`) and delegating tasks to the appropriate backend layers (`services/`, main process utilities).

Adherence to these rules ensures secure, maintainable, and understandable communication between the frontend (React/Zustand UI) and backend (Electron main process).

---

## 1. One Handler Per File/Channel

-   **Rule:** Each distinct IPC channel/action **must** have its own dedicated handler file within the `electron/ipc/` directory. The filename should clearly relate to the action (e.g., `saveNotebook.ts` for a `NOTEBOOK_SAVE` channel).
-   **Rationale:** Keeps logic modular, easy to find, and prevents files from becoming overly complex.
-   **Example:** An IPC channel named `'notebook:save'` (defined in `shared/ipcChannels.ts`) should have its handler implemented in `electron/ipc/saveNotebook.ts`.

## 2. Thin and Focused Handlers

-   **Rule:** IPC handlers **must** remain lightweight. Their primary responsibilities are:
    1.  Basic input validation/sanitization received from the renderer.
    2.  Calling the appropriate function in the `services/` layer or a main process utility (e.g., for BrowserView control, file I/O for state persistence).
    3.  Handling errors from the service/utility call and returning a structured response or throwing an error back to the renderer.
-   **Rationale:** Prevents blocking the main process, centralizes business logic, improves testability.
-   **Anti-Pattern:** Handlers should **not** contain complex business logic, direct database/filesystem operations (these belong in `models/` accessed via `services/`, or specific file utilities for state persistence).

```typescript
// Example: electron/ipc/notebookSave.ts (Illustrative)
import { ipcMain } from 'electron';
import { NOTEBOOK_SAVE } from '../../shared/ipcChannels'; // Defined in shared/
import { notebookService } from '../../services/NotebookService'; // Import service instance
// Assume validateNotebookData is defined elsewhere

export function registerSaveNotebookHandler() {
  ipcMain.handle(NOTEBOOK_SAVE, async (_event, notebookData) => {
    // 1. Validate Input (Example)
    // const { error } = validateNotebookData(notebookData);
    // if (error) { throw new Error(`Invalid notebook data: ${error}`); }

    try {
      // 2. Delegate to Service
      const result = await notebookService.updateNotebook(notebookData.id, notebookData); // Adjust to actual service method
      return { success: true, data: result };
    } catch (serviceError) {
      console.error(`[IPC Handler Error][${NOTEBOOK_SAVE}] Failed:`, serviceError);
      throw new Error(`Failed to save notebook. Please try again.`);
    }
  });
}
```

## 3. Centralized Channel Definitions

-   **Rule:** All IPC channel string names **must** be defined as constants in `shared/ipcChannels.ts` and imported by both the preload script (`electron/preload.ts`) and the corresponding IPC handler (`electron/ipc/*.ts`).
-   **Rationale:** Prevents typos, ensures consistency, simplifies refactoring, provides a clear map of IPC actions.
-   **Key IPC Channel Categories (refer to `shared/ipcChannels.ts` for specifics):**
    *   **Notebook CRUD:** `NOTEBOOK_CREATE`, `NOTEBOOK_GET`, `NOTEBOOK_LIST`, `NOTEBOOK_UPDATE`, `NOTEBOOK_DELETE`.
    *   **Chat Session Management (within Notebooks):** `CHAT_SESSION_CREATE_IN_NOTEBOOK`, `CHAT_SESSION_LIST_FOR_NOTEBOOK`, `CHAT_SESSION_TRANSFER`.
    *   **Chat Streaming & History:** `CHAT_STREAM_START`, `CHAT_STREAM_STOP`, `ON_CHAT_RESPONSE_CHUNK`, `ON_CHAT_STREAM_END`, `ON_CHAT_STREAM_ERROR`, `CHAT_GET_MESSAGES`.
    *   **Content/Context Retrieval:** `GET_SLICE_DETAILS`.
    *   **Intent Handling:** `SET_INTENT`, `ON_INTENT_RESULT`.
    *   **`BrowserView` Management:** `BROWSER_VIEW_CREATE`, `BROWSER_VIEW_NAVIGATE`, `BROWSER_VIEW_GO_BACK`, `BROWSER_VIEW_GO_FORWARD`, `BROWSER_VIEW_RELOAD`, `BROWSER_VIEW_STOP_LOAD`, `BROWSER_VIEW_SET_BOUNDS`, `BROWSER_VIEW_DESTROY`, and the event `ON_BROWSER_VIEW_STATE_UPDATE` (main to renderer).
    *   **State Persistence (for Zustand store):** `STORE_GET`, `STORE_SET`, `STORE_REMOVE`.
    *   **Profile/Settings:** `PROFILE_GET`.
    *   **Data Ingestion (Bookmarks/Files):** `BOOKMARKS_IMPORT`, `FILE_SAVE_TEMP`, `ON_BOOKMARKS_PROGRESS`.

## 4. Use Appropriate IPC Patterns

-   **Rule:** Use `ipcMain.handle` / `ipcRenderer.invoke` for request/response interactions where the renderer needs a result or confirmation.
-   **Rule:** Use `event.sender.send()` (from within an `ipcMain.on` or `ipcMain.handle` callback) or `mainWindow.webContents.send()` (from other main process modules, where `mainWindow` is the `BrowserWindow` instance) for one-way notifications or pushing events *from* the main process *to* the renderer. This is critical for:
    *   Streaming chat responses (`ON_CHAT_RESPONSE_CHUNK`, `ON_CHAT_STREAM_END`, `ON_CHAT_STREAM_ERROR`).
    *   `BrowserView` state updates (`ON_BROWSER_VIEW_STATE_UPDATE`).
    *   Intent results (`ON_INTENT_RESULT`).
    *   Progress updates (`ON_BOOKMARKS_PROGRESS`).
-   **Rationale:** `handle/invoke` is for renderer-initiated requests needing direct replies. `send` is for main-process-initiated events or ongoing updates to the UI.

## 5. Robust Error Handling

-   **Rule:** IPC handlers **must** gracefully handle errors from `services/` or utility calls. Use `try...catch`. Propagate meaningful errors by `throw new Error(...)` in `ipcMain.handle`, which rejects the renderer's promise. For `send` events, errors might need a dedicated error event channel if not part of the primary event's payload.
-   **Rationale:** Prevents main process crashes, allows UI to give feedback.

## 6. Security: Validate Renderer Input

-   **Rule:** **Never** trust input from the renderer. Always validate/sanitize data in the IPC handler *before* passing it to services or utilities.
-   **Rationale:** Protects against vulnerabilities and logic errors.
-   **Rule:** Do not expose Electron or Node.js internals directly via `contextBridge`. Use wrapper functions.

## 7. Registration in `main.ts`

-   **Rule:** All IPC handler registration functions (e.g., `registerXyzHandler()`) **must** be imported and called within `electron/main.ts`, typically during app initialization.
-   **Rationale:** Centralizes activation of backend communication endpoints.
-   **Guidance:** `electron/main.ts` should only call registration functions; handler logic resides in `electron/ipc/`.

---

By following these IPC rules, communication remains a secure, thin, and understandable bridge between the UI (React/Zustand in `src/`) and its backend logic and main process capabilities.