---
description: 
globs: 
alwaysApply: true
---
# Cursor Rules: Service Layer (`services/`)

This file defines rules for the business logic layer within `services/`. Services orchestrate tasks between IPC handlers (`electron/ipc/`), data persistence (`models/`), AI capabilities (`agents/`), and other main process functionalities (like `BrowserView` management).

These rules ensure business logic is centralized, testable, and decoupled from UI and low-level details.

---

## 1. No Direct Data Persistence or File Access (Beyond Specific Utilities)

-   **Rule:** Service modules **must never** directly interact with databases (e.g., execute SQL) or the general file system for domain data (e.g., read/write user content files). All domain data operations **must** be delegated to `models/`.
-   **Exception:** Main process utilities or simple handlers responsible for persisting application state (like window layouts via `STORE_SET` IPC) **may** perform direct file I/O to designated user data directories, but this is distinct from domain model persistence.
-   **Rationale:** Enforces separation of concerns, centralizes data access, testability.

## 2. Task Orchestration and Coordination

-   **Rule:** Services are the designated layer for multi-step workflows and coordinating interactions between `models/`, `agents/`, other `services/`, and main process utilities.
    *   **`IntentService`**: Key orchestrator for commands from the UI (command palette). It parses intents and delegates to other services (`NotebookService`, `ChatService`, `AgentService`) or triggers main process actions (e.g., instructing `BrowserViewManagementService` or sending IPC to renderer for window state changes).
    *   **`(Conceptual) BrowserViewManagementService`**: If created, this service would encapsulate logic for creating, managing the lifecycle of, and relaying events from `Electron.BrowserView` instances. IPC handlers for `BrowserView` control would call this service.
-   **Rationale:** Centralizes complex business processes, clarifies flow.
-   **Guidance:** Services may use `utils/` functions.

## 3. Statelessness and State Management

-   **Rule:** Aim for service *methods* to be stateless where possible. Service *instances* **MAY** manage transient state relevant to an orchestrated task (e.g., `ChatService` managing active LLM stream buffers).
-   **Rule (AgentService State):** `AgentService` manages its execution state using LangGraph.
-   **Rule (Chat History):** Persistent chat history is managed by `ChatModel`.
-   **Rule (UI/Window State):** The primary state for UI windows (positions, sizes, content identifiers) **resides in the renderer process, managed by Zustand** (via notebook-specific stores created by `windowStoreFactory.ts`). The main process services do *not* directly manage this UI state but may receive instructions related to it (e.g., "open a new chat window for session X" from `IntentService`, which then tells the renderer via IPC) or provide data that influences it. Window layout *persistence* is handled by main process file I/O, triggered by the renderer.
-   **Rationale:** Clear distinction between backend operational state and frontend UI state.

## 4. No UI, Electron (UI-Specific), or Preload Dependencies

-   **Rule:** Services **must remain** independent of the presentation layer (`src/`) and Electron UI-specific APIs (`BrowserWindow` direct manipulation unless it's a dedicated window management service, `contextBridge`, `window`).
-   **Rationale:** Pure business logic, portability, reusability.
-   **Guidance:** Configuration (like user data paths) injected during initialization.

## 5. Clear API Surface and Documentation

-   **Rule:** Services expose clear, well-typed APIs (public functions/methods). Use JSDoc/comments.
-   **Rationale:** Easy and safe consumption by IPC handlers, other services, agents.

## 6. High-Level Logging

-   **Rule:** Log significant business events/workflow steps. Use a consistent logger.
-   **Rationale:** Visibility, debugging.

## 7. Initialization and Instantiation

-   **Rule:** Service instances **should** be initialized appropriately within the Electron main process (e.g., in `electron/main.ts` or a dedicated services setup module) before they are needed by IPC handlers. This includes dependency injection (models, other services, config).
-   **Rationale:** Ensures services are ready and correctly configured.

## 8. LangChain Usage

-   **Rule:** Use LCEL chains. Avoid legacy classes.
-   **Rule:** Explicitly capture exact source documents for RAG for accurate attribution.
-   **Rule:** Preserve retriever's relevance ranking when hydrating documents.
-   **Rationale:** Modern, flexible, observable LangChain APIs; data integrity.

---
## Core Service Responsibilities (New Architecture)

-   **`IntentService.ts`**: 
    *   Receives user intent from `SET_INTENT` IPC channel (command palette).
    *   Parses intent (simple commands or LLM-assisted).
    *   Orchestrates actions:
        *   Calls `NotebookService` for notebook CRUD, chat creation within notebooks.
        *   Calls `ChatService` for operations on existing chat sessions.
        *   Delegates complex AI tasks to `AgentService`.
        *   Initiates `BrowserView` creation/control (via `BrowserViewManagementService` or direct IPC to main process handlers).
        *   Triggers UI state changes in the renderer (e.g., open window, focus window) by sending targeted IPC messages (e.g., `ON_INTENT_RESULT` containing instructions for the renderer's active `windowStore`).
    *   Sends results/feedback back to UI via `ON_INTENT_RESULT` or other dedicated channels.

-   **`NotebookService.ts`**: 
    *   Manages lifecycle of `NotebookRecord` (via `NotebookModel`).
    *   Orchestrates creation/deletion of the corresponding `JeffersObject` for each notebook (via `ObjectModel`) to make notebooks themselves part of the knowledge base.
    *   Manages chat sessions *within* notebooks:
        *   `createChatInNotebook(notebookId, title?)`: Creates a new `IChatSession` linked to the notebook via `ChatModel`.
        *   `listChatsForNotebook(notebookId)`: Retrieves all chat sessions for a notebook.
        *   `transferChatToNotebook(sessionId, newNotebookId)`: Updates the `notebook_id` for a chat session via `ChatModel`.

-   **`ChatService.ts`**: 
    *   Manages streaming LLM interactions for a given `sessionId` (via `LangchainAgent`).
    *   Handles retrieval and formatting of chat messages for a `sessionId` (via `ChatModel`), including parsing metadata.
    *   Ensures `IChatSession` exists (via `ChatModel`) before starting operations for a `sessionId`. (Creation is now primarily driven by `NotebookService.createChatInNotebook`).

-   **`(Conceptual) BrowserViewManagementService.ts`** (Main Process):
    *   If BrowserView logic becomes complex, this service would:
    *   Create, manage, and destroy `Electron.BrowserView` instances.
    *   Map `targetWindowId` (from renderer's Zustand store) to `BrowserView` instances.
    *   Attach listeners to `BrowserView.webContents` (navigation, title, load state, errors).
    *   Relay `BrowserView` state changes back to the renderer via `ON_BROWSER_VIEW_STATE_UPDATE` IPC, keyed by `targetWindowId`.
    *   Handle navigation requests (`loadURL`, `goBack`, etc.) from IPC handlers.

-   **Main Process File I/O Utilities (for State Persistence)**:
    *   Not a full "service" in the business logic sense, but handlers for `STORE_GET`, `STORE_SET`, `STORE_REMOVE` IPC channels.
    *   These directly read/write the serialized Zustand state (for window layouts) to JSON files in the user data directory, keyed by notebook ID.

By adhering to these Service Layer rules, core business logic, AI orchestration, and main process capabilities are well-organized and effectively support the dynamic windowing UI.